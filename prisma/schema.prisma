// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// datasource db {
//     provider = "postgresql"
//     // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//     // Further reading:
//     // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//     // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//     url      = env("DATABASE_URL")
// }

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Task {
    id          String    @id @default(cuid())
    title       String
    description String?
    deadline    DateTime?
    priority    String? // (e.g., High, Medium, Low)
    status      String // (e.g., To Do, In Progress, Done)
    completed   Boolean   @default(false)
    users       User[]
    tags Tag[] @relation("TaskTag")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    tasks         Task[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id          Int     @id @default(autoincrement())
    name        String  @unique
    description String?

    // Relationship with Tasks (many tags can belong to many tasks)
    tasks Task[] @relation("TaskTag")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



// model User {
//     id       Int     @id @default(autoincrement())
//     email    String  @unique
//     name     String?
//     password String

//     // Relationship with Tasks (one user can have many tasks)
//     tasks Task[]

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model XREF_TASK {
    id     String @id @default(cuid())
    userId String
    taskId String
}
